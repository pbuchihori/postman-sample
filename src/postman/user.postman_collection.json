{
	"info": {
		"_postman_id": "2d4c37fe-5c81-4645-a5c9-5786c69bee90",
		"name": "user",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21836376"
	},
	"item": [
		{
			"name": "get users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"        users: {\r",
							"            type: \"array\",\r",
							"            properties: {\r",
							"                id: {\r",
							"                    type: \"string\"\r",
							"                },\r",
							"                name: {\r",
							"                    type: \"string\"\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"    },\r",
							"}\r",
							"\r",
							"pm.test(\"statusCode is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"response body matches schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"        id: {\r",
							"            type: \"string\"\r",
							"        },\r",
							"        name: {\r",
							"            type: \"string\"\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"statusCode is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"response body matches schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/user/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get not existed user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response code is 404\", () => {\r",
							"    pm.response.to.have.status(404);\r",
							"})\r",
							"\r",
							"pm.test(\"responseBody has correct error message\", () => {\r",
							"    pm.expect(pm.response.json().error).to.eq(\"Not Found\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/user/aaa",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"aaa"
					]
				}
			},
			"response": []
		},
		{
			"name": "create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    type: \"object\",\r",
							"    properties: {\r",
							"        createdAt: {\r",
							"            type: \"number\"\r",
							"        }\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.test(\"response code is 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"response body matches schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"aaa\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "create user without params",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"})\r",
							"\r",
							"pm.test(\"responseBody has correct error message\", () => {\r",
							"    pm.expect(pm.response.json().error).to.eq(\"Bad Request\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "update user",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"abcd\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "update not existed user",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"abcd\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/aaa",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"aaa"
					]
				}
			},
			"response": []
		},
		{
			"name": "update user without params",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete user",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/user/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete not existed user",
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/user/aaa",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"user",
						"aaa"
					]
				}
			},
			"response": []
		}
	]
}